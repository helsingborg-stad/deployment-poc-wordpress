AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for the pipeline building the docker images and pushing to the ECS cluster.

Parameters:
  GitHubOwner:
    Type: String
    Default: 'helsingborg-stad'
    Description: Owner of the github repo.
  GitHubRepo:
    Type: String
    Default: 'deployment-poc-wordpress'
    Description: Name of the repo.
  GitHubBranch:
    Type: String
    Default: 'master'
    Description: Branch to react on commits.
Resources:

##
# CodeBuild
##

  CodeBuildProjectDocker:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-docker"
      ServiceRole: !GetAtt IAMRoleCodebuild.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: cloudformation/pipeline/buildspec-docker.yml
      TimeoutInMinutes: 10

  CodeBuildProjectPrepareSource:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-prepare-source"
      ServiceRole: !GetAtt IAMRoleCodebuild.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: cloudformation/pipeline/buildspec-prepare-source.yml
      TimeoutInMinutes: 10

##
# CodePipeline
##

  CodePipelinePipeline: # TODO Do we want to encrypt artifacts?
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt IAMRoleCodePipeline.Arn
      Stages:
        -
          Name: GetSource
          Actions:
            -
              Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: "{{resolve:secretsmanager:CodepipelineGithubAccessToken:SecretString:token}}"
                PollForSourceChanges: false
              OutputArtifacts:
                - 
                  Name: SourceOutput
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: BuildAndPushPHPDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-docker"
                EnvironmentVariables: !Sub '[{"name": "BUILD_CONTEXT", "value": "./docker/php-fpm/"},{"name": "ECR_REPOSITORY_URI", "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-php-fpm"}]'
              InputArtifacts: 
                - 
                  Name: SourceOutput
              OutputArtifacts:
                - 
                  Name: BuildPHPOutput
              RunOrder: 1
            -
              Name: BuildAndPushNginxDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-docker"
                EnvironmentVariables: !Sub '[{"name": "BUILD_CONTEXT", "value": "./docker/nginx/"},{"name": "ECR_REPOSITORY_URI", "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-nginx"}]'
              InputArtifacts: 
                - 
                  Name: SourceOutput
              OutputArtifacts:
                - 
                  Name: BuildNginxOutput
              RunOrder: 1
        - Name: Stage
          Actions:
            - Name: CloudFormationCreate
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt IAMRoleCloudformation.Arn
                StackName: deployment-poc-wordpress-stage
                #TemplateConfiguration: TemplateSource::test-configuration.json
                TemplatePath: TemplateSource::cloudformation/app/cfn-stack.yml
                ParameterOverrides: |
                  {
                    "PHPFPMImage" : { "Fn::GetParam" : ["BuildPHPOutput", "imagedefinitions.json", "imageUri"]},
                    "NginxImage" : { "Fn::GetParam" : ["BuildNginxOutput", "imagedefinitions.json", "imageUri"]},
                  }
              InputArtifacts:
                - Name: SourceOutput
                - Name: BuildPHPOutput
                - Name: BuildNginxOutput
              RunOrder: '1'
            # -
            #   Name: PrepareSource
            #   ActionTypeId:
            #     Category: Build
            #     Owner: AWS
            #     Version: 1
            #     Provider: CodeBuild
            #   Configuration:
            #     ProjectName: !Sub "${AWS::StackName}-prepare-source"
            #     PrimarySource: SourceOutput
            #   InputArtifacts:
            #     - 
            #       Name: BuildNginxOutput
            #     - 
            #       Name: BuildPHPOutput
            #     - 
            #       Name: SourceOutput
            #   OutputArtifacts:
            #     - 
            #       Name: SourcePrepared
            #   RunOrder: 2
        # -
        #   Name: Stage Deploy
        #   Actions:
        #     -
        #       Name: Build Docker Image
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: 1
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref AWS::StackName
        #       InputArtifacts: 
        #         - 
        #           Name: SourceOutput
        #       RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:CodepipelineGithubAccessToken:SecretString:token}}"
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: !Sub "refs/heads/${GitHubBranch}" # TODO Filter more specific to avoid pushes we dont care about.
      TargetPipeline: !Ref CodePipelinePipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhook
      TargetPipelineVersion: !GetAtt CodePipelinePipeline.Version
      RegisterWithThirdParty: true

##
# ECR
##

  ECRRepositoryPhpFpm: 
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-php-fpm"

  ECRRepositoryNginx: 
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-nginx"

##
# IAM Role
##

  IAMRoleCodebuild:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: "*" # TODO More granular resources here

  IAMRoleCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProjectDocker.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProjectPrepareSource.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ValidateTemplate
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"

  IAMRoleCloudformation:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
             - Effect: Allow
               Action:
                 - iam:*
                 - ec2:*
                 - logs:*
                 - ecs:*
                 - applicationautoscaling:*
               Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"

##
# S3 Bucket
##

  S3Bucket:
    Type: AWS::S3::Bucket
