AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for the pipeline building the docker images and pushing to the ECS cluster.

Parameters:
  GitHubOwner:
    Type: String
    Default: 'helsingborg-stad'
    Description: Owner of the github repo.
  GitHubRepo:
    Type: String
    Default: 'deployment-poc-wordpress'
    Description: Name of the repo.
  GitHubBranch:
    Type: String
    Default: 'master'
    Description: Branch to react on commits.

Resources:

##
# CodeBuild
##

  CodeBuildProjectDockerPhpFpm:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-docker-php-fpm"
      ServiceRole: !GetAtt IAMRoleCodebuild.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: cloudformation/pipeline/buildspec-docker-app.yml
      TimeoutInMinutes: 20

  CodeBuildProjectIntegrationTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-integration-test"
      ServiceRole: !GetAtt IAMRoleCodebuild.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: cloudformation/pipeline/buildspec-integration-test.yml
      TimeoutInMinutes: 10

##
# CodePipeline
##

  CodePipelinePipeline: # TODO Do we want to encrypt artifacts?
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt IAMRoleCodePipeline.Arn
      Stages:
        -
          Name: GetSource
          Actions:
            -
              Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: "{{resolve:secretsmanager:CodepipelineGithubAccessToken:SecretString:token}}"
                PollForSourceChanges: false
              OutputArtifacts:
                - 
                  Name: SourceOutput
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: BuildAndPushPHPDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-docker-php-fpm"
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "BUILD_CONTEXT",
                      "value": "./docker/php-fpm/"
                    },
                    {
                      "name": "ECR_REPOSITORY_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-php-fpm"
                    },
                    {
                      "name": "NPM_TOKEN",
                      "type": "SECRETS_MANAGER",
                      "value": "NpmTokenSecret:NPM_TOKEN"
                    },
                    {
                      "name": "ACF",
                      "type": "SECRETS_MANAGER",
                      "value": "ACF:ACF"
                    },
                    {
                      "name": "CLEANUP",
                      "value": "--cleanup"
                    },
                    {
                      "name": "DOCKER_USER",
                      "type": "SECRETS_MANAGER",
                      "value": "DockerCredentials:USER"
                    },
                    {
                      "name": "DOCKER_PASSWORD",
                      "type": "SECRETS_MANAGER",
                      "value": "DockerCredentials:PASSWORD"
                    }
                  ]
              InputArtifacts: 
                - 
                  Name: SourceOutput
              OutputArtifacts:
                - 
                  Name: BuildPHPOutput
              RunOrder: 1
        - Name: Stage
          Actions:
            - Name: CreateStage
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt IAMRoleCloudformation.Arn
                OutputFileName: stack-output-stage.json
                StackName: deployment-poc-wordpress-stage
                TemplateConfiguration: SourceOutput::cloudformation/app/cfn-stack-parameters-stage.json
                TemplatePath: SourceOutput::cloudformation/app/cfn-stack.yml
                ParameterOverrides: |
                    {
                      "PHPFPMImage" : { "Fn::GetParam" : ["BuildPHPOutput", "imagedefinitions.json", "imageUri"]},
                      "Environment": "stage"
                    }
              InputArtifacts:
                - Name: SourceOutput
                - Name: BuildPHPOutput
              OutputArtifacts:
                - Name: StackStageOutput
              RunOrder: 1
            -
              Name: IntegrationTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-integration-test"
                EnvironmentVariables: '[{"name": "STAGE_HOST","value": "https://www.google.se"}]' # TODO Fix getparam in here
                PrimarySource: SourceOutput
              InputArtifacts:
                - 
                  Name: SourceOutput
              RunOrder: 2
        - Name: Production
          Actions:
            -
              Name: ApprovalStage
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
                # TODO notification
            - Name: CreateProduction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt IAMRoleCloudformation.Arn
                StackName: deployment-poc-wordpress-prod
                TemplateConfiguration: SourceOutput::cloudformation/app/cfn-stack-parameters-prod.json
                TemplatePath: SourceOutput::cloudformation/app/cfn-stack.yml
                ParameterOverrides: |
                    {
                      "PHPFPMImage" : { "Fn::GetParam" : ["BuildPHPOutput", "imagedefinitions.json", "imageUri"]},
                      "Environment": "prod"
                    }
              InputArtifacts:
                - Name: SourceOutput
                - Name: BuildPHPOutput
              RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:CodepipelineGithubAccessToken:SecretString:token}}"
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: !Sub "refs/heads/${GitHubBranch}" # TODO Filter more specific to avoid pushes we dont care about.
      TargetPipeline: !Ref CodePipelinePipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhook
      TargetPipelineVersion: !GetAtt CodePipelinePipeline.Version
      RegisterWithThirdParty: true

##
# ECR
##

  ECRRepositoryPhpFpm: 
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-php-fpm"

##
# IAM Role
##

  IAMRoleCodebuild:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*" #TODO More granular resources here
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  # - ecr:BatchCheckLayerAvailability
                  # - ecr:CompleteLayerUpload
                  # - ecr:GetAuthorizationToken
                  # - ecr:InitiateLayerUpload
                  # - ecr:PutImage
                  # - ecr:UploadLayerPart
                  # - ecr:BatchGetImage
                  - ecr:*
                Resource: "*" # TODO More granular resources here

  IAMRoleCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProjectDockerPhpFpm.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProjectIntegrationTest.Arn
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt IAMRoleCloudformation.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ValidateTemplate
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"

  IAMRoleCloudformation:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
             - Effect: Allow
               Action:
                 - iam:*
                 - ec2:*
                 - logs:*
                 - ecs:*
                 - application-autoscaling:*
                 - elasticloadbalancing:*
                 - secretsmanager:*
                 - rds:*
                 - s3:*
                 - elasticache:*
               Resource: "*"

##
# S3 Bucket
##

  S3Bucket:
    Type: AWS::S3::Bucket
