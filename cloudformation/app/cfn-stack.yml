AWSTemplateFormatVersion: 2010-09-09
Description: Wordpress poc resources stack.

Parameters:
  PHPFPMImage:
    Type: String
    Description: Image for php-fpm. (Overridden in codepipeline)
  NginxImage:
    Type: String
    Description: Image for nginx. (Overridden in codepipeline)
  Environment:
    Type: String
    Description: Environment name. (Overridden in codepipeline)
  SecretsArn:
    Type: String
    Description: Secrets container ARN. (Overridden in codepipeline)

Resources:
##
# ECS
##
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
##
# EC2
##   

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS task security group
      GroupName: !Sub "${AWS::StackName}-ecs-task-sg"
      VpcId:
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref EC2SecurityGroupPublicLoadBalancer
          IpProtocol: "-1"

  EC2SecurityGroupPublicLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  EC2SecurityGroupIngressPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: 
        Fn::ImportValue: infrastructure-poc-wordpress-ecs-EC2SecurityGroupECSHost
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref EC2SecurityGroupPublicLoadBalancer

##
# IAM
##      

  IAMRoleTaskExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  IAMRoleTaskDefinition:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]

  IAMRoleAutoScaling:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

##
# Logs
##

  LogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}"
      RetentionInDays: 14

##
# ECS
##

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ElasticLoadBalancingV2Listener
    Properties:
      LaunchType: FARGATE
      ServiceName: !Sub "${AWS::StackName}"
      HealthCheckGracePeriodSeconds: 60
      # For CloudFormation not to get stuck during AWS::ECS::Service specify the task ARN
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt IAMRoleTaskExecution.Arn
      TaskRoleArn: !Ref IAMRoleTaskDefinition
      Family: !Sub "${AWS::StackName}"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: php-fpm
          Image: !Ref PHPFPMImage
          PortMappings:
            - ContainerPort: 9000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogsLogGroup
              awslogs-stream-prefix: php-fpm
          Environment:
            - Name: WP_DB_HOST
              Value: !GetAtt RDSDBCluster.Endpoint.Address
            - Name: S3_UPLOADS_BUCKET
              Value: !Ref S3Bucket
            - Name: ENV
              Value: !Ref Environment
          Secrets:
            - Name: WP_DB_NAME
              ValueFrom: !Ref SecretsArn
            - Name: WP_DB_USER
              ValueFrom: !Ref SecretsArn
            - Name: WP_DB_PASSWORD
              ValueFrom: !Ref SecretsArn
            - Name: WP_AUTH_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_SECURE_AUTH_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_LOGGED_IN_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_NONCE_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_AUTH_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_SECURE_AUTH_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_LOGGED_IN_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_NONCE_SALT
              ValueFrom: !Ref SecretsArn
        - Name: nginx
          Image: !Ref NginxImage
          Links: 
            - php-fpm
          VolumesFrom:
            - SourceContainer: php-fpm
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogsLogGroup
              awslogs-stream-prefix: nginx

##
# ApplicationAutoScaling
##

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      RoleARN: !GetAtt IAMRoleAutoScaling.Arn
      ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 5

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-auto-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 75.0

##
# ElasticLoadBalancingV2
##

  ElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "30"
      Subnets:
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
      SecurityGroups: 
        - !Ref EC2SecurityGroupPublicLoadBalancer

  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
        
  ElasticLoadBalancingV2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID

  RDSDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      EngineMode: serverless
      DatabaseName: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_NAME}}"
      MasterUsername: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_USER}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_PASSWORD}}"
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 4
        MaxCapacity: 32

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: files.helsingborg.se

  IAMUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: S3BucketPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: BucketObjects
                Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Sid: BucketList
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"