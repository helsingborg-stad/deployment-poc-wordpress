AWSTemplateFormatVersion: 2010-09-09
Description: Wordpress poc resources stack.

Parameters:
  PHPFPMImage:
    Type: String
    Description: Image for php-fpm. (Overridden in codepipeline)
  Environment:
    Type: String
    Description: Environment name. (Overridden in codepipeline)
  SecretsArn:
    Type: String
    Description: Secrets container ARN. (Overridden in codepipeline)

Resources:
##
# ApplicationAutoScaling
##
  ApplicationAutoScalingScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      RoleARN: !GetAtt IAMRoleAutoScaling.Arn
      ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 5

  ApplicationAutoScalingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-auto-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 75.0



##
# EC2
##   
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS task security group
      GroupName: !Sub "${AWS::StackName}-ecs-task-sg"
      VpcId:
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref EC2SecurityGroupPublicLoadBalancer
          IpProtocol: "-1"

  EC2SecurityGroupPublicLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  EC2SecurityGroupElasticache:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticache Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379

  EC2SecurityGroupContainer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Container Security Group
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref EC2SecurityGroupPublicLoadBalancer

  EC2SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: "10.2.0.0/16"
      SecurityGroupEgress: 
        - CidrIp: "10.2.0.0/16"
          IpProtocol: "-1"

##
# ECS
##
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ElasticLoadBalancingV2Listener
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      LaunchType: FARGATE
      ServiceName: !Sub "${AWS::StackName}"
      HealthCheckGracePeriodSeconds: 60
      # For CloudFormation not to get stuck during AWS::ECS::Service specify the task ARN
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: php-fpm
          ContainerPort: 80
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
            - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
          SecurityGroups:
            - !Ref EC2SecurityGroupContainer

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt IAMRoleTaskExecution.Arn
      TaskRoleArn: !Ref IAMRoleTaskDefinition
      Family: !Sub "${AWS::StackName}"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: php-fpm
          Image: !Ref PHPFPMImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogsLogGroup
              awslogs-stream-prefix: php-fpm
          Environment:
            - Name: WP_DOMAIN_CURRENT_SITE
              Value: dockertest.helsingborg.io
            - Name: WP_DB_HOST
              Value: !GetAtt RDSDBCluster.Endpoint.Address
            - Name: WP_REDIS_HOST
              Value: !GetAtt ElasticacheCluster.RedisEndpoint.Address
            - Name: S3_UPLOADS_BUCKET
              Value: !Ref S3Bucket
            - Name: S3_UPLOADS_KEY
              Value: !Ref IAMAccessKeyS3
            - Name: S3_UPLOADS_SECRET
              Value: !GetAtt IAMAccessKeyS3.SecretAccessKey
            - Name: ENV
              Value: !Ref Environment
          Secrets:
            - Name: WP_DB_NAME
              ValueFrom: !Ref SecretsArn
            - Name: WP_DB_USER
              ValueFrom: !Ref SecretsArn
            - Name: WP_DB_PASSWORD
              ValueFrom: !Ref SecretsArn
            - Name: WP_AUTH_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_SECURE_AUTH_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_LOGGED_IN_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_NONCE_KEY
              ValueFrom: !Ref SecretsArn
            - Name: WP_AUTH_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_SECURE_AUTH_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_LOGGED_IN_SALT
              ValueFrom: !Ref SecretsArn
            - Name: WP_NONCE_SALT
              ValueFrom: !Ref SecretsArn


##
# Elasticache
##
  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:    
      Engine: redis
      EngineVersion: 6.x
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt EC2SecurityGroupElasticache.GroupId

        

##
# ElasticLoadBalancingV2
##
  ElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "30"
      Subnets:
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
      SecurityGroups: 
        - !Ref EC2SecurityGroupPublicLoadBalancer

  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
        
  ElasticLoadBalancingV2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 61
      HealthCheckPath: /health.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      TargetType: ip
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID



##
# IAM
##      
  IAMRoleTaskExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  IAMRoleTaskDefinition:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]

  IAMRoleAutoScaling:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  IAMUserS3:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: S3BucketPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: BucketObjects
                Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Sid: BucketList
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"

  IAMAccessKeyS3:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref IAMUserS3



##
# Logs
##
  LogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}"
      RetentionInDays: 14



##
# RDS
##

  RDSDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      EngineMode: serverless
      DatabaseName: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_NAME}}"
      MasterUsername: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_USER}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${SecretsArn}:SecretString:WP_DB_PASSWORD}}"
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 4
        MaxCapacity: 32
      VpcSecurityGroupIds:
        - !Ref EC2SecurityGroupRDS
      DBSubnetGroupName:
        !Ref RDSDBSubnetGroup
      EnableHttpEndpoint: true

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds: 
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
##
# S3
##
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: files-dockertest.helsingborg.io
